AWSTemplateFormatVersion: '2010-09-09'
Description: |
  Todo App Stack with EC2 instance running Docker Compose via S3-based initialization.
  The EC2 instance downloads initialization scripts from S3 to set up the environment.

Parameters:
  VpcId:
    Description: VPC where the EC2 instance will be launched
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Description: Subnet where the EC2 instance will be launched
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.micro # t3.nano (0.5GB) is insufficient - containers need ~210MB, system needs ~420MB

Resources:
  # Deployment Flow:
  # 1. CloudFormation creates:
  #    - S3 bucket for initialization assets
  #    - IAM role for EC2 with S3 read access
  #    - EC2 instance with minimal user-data
  #
  # 2. Initial User-Data (minimal, in CloudFormation)
  #    └─> Downloads ec2-initialization.sh from S3
  #        └─> ec2-initialization.sh (does everything):
  #            - Downloads docker-compose.yml from S3
  #            - Installs Docker & dependencies
  #            - Runs docker-compose up
  #
  # Note: The ec2-initialization script execution is initially commented out to allow manual testing via EC2 connect.

  InitializationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub ${InitializationBucket.Arn}/*

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  TodoAppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Todo App
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5672
          ToPort: 5672
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 15672
          ToPort: 15672
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  TodoAppInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: ami-0122fd36a4f50873a # Amazon Linux 2023 x86_64 in eu-central-1
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
        - !Ref TodoAppSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 10
            VolumeType: gp3
            DeleteOnTermination: true
      UserData: # Logs go to: (1) /var/log/ec2-initialization.log (2) syslog via logger command
        Fn::Base64: !Sub |
          #!/bin/bash
          # Redirect output to log file
          exec 1> /var/log/ec2-initialization.log 2>&1
          # Also send to syslog
          exec 1> >(logger -s -t $(basename $0)) 2>&1

          echo "[$(date)] Starting minimal user data script..."

          echo "[$(date)] Installing AWS CLI..."
          dnf install -y aws-cli

          echo "[$(date)] Downloading and running initialization script..."
          echo "Starting: aws s3 cp s3://${InitializationBucket}/ec2-initialization.sh /usr/local/bin/ec2-initialization.sh && chmod +x /usr/local/bin/ec2-initialization.sh && INIT_BUCKET=${InitializationBucket} STACK_NAME=${AWS::StackName} /usr/local/bin/ec2-initialization.sh"

          # Retry S3 access with exponential backoff and longer initial delay
          max_attempts=10
          attempt=1
          success=false
          initial_delay=10  # Start with a 10 second delay

          while [ $attempt -le $max_attempts ]; do
            echo "[$(date)] Attempt $attempt of $max_attempts to access S3..."
            if aws s3 cp s3://${InitializationBucket}/ec2-initialization.sh /usr/local/bin/ec2-initialization.sh; then
              chmod +x /usr/local/bin/ec2-initialization.sh
              INIT_BUCKET=${InitializationBucket} STACK_NAME=${AWS::StackName} /usr/local/bin/ec2-initialization.sh
              success=true
              break
            fi
            
            sleep_time=$((initial_delay * 2 ** (attempt - 1)))
            echo "[$(date)] Waiting $sleep_time seconds before next attempt..."
            sleep $sleep_time
            ((attempt++))
          done

          if [ "$success" = false ]; then
            echo "[$(date)] WARNING: Failed to access S3 after $max_attempts attempts. Instance will start but initialization is incomplete."
            exit 1
          fi

          # Now that we have the initialization script, we can enable strict error checking
          set -e

          echo "[$(date)] Initialization completed."
      Tags:
        - Key: Name
          Value: !Ref 'AWS::StackName'

Outputs:
  InitializationBucketName:
    Description: Name of the S3 bucket containing initialization files
    Value: !Ref InitializationBucket
  WebApiEndpoint:
    Description: Web API endpoint URL
    Value: !Sub 'http://${TodoAppInstance.PublicDnsName}:5000'
  RabbitMQManagement:
    Description: RabbitMQ Management UI URL
    Value: !Sub 'http://${TodoAppInstance.PublicDnsName}:15672'
