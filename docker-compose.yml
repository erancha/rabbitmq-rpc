services:
  webapi:
    build:
      context: .
      dockerfile: src/TodoApp.WebApi/Dockerfile
    ports:
      - "5000:8080"
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"  # logs in /var/lib/docker/containers/<container_id>/<container_id>-json.log. Find ID with: docker compose ps -q <service_name> or docker inspect <service_name>
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        mode: "non-blocking"
    deploy:
      resources:
        limits:
          memory: "256M"  # nano: "128M", micro: "256M", small: "384M"

  worker:
    build:
      context: .
      dockerfile: src/TodoApp.WorkerService/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Host=postgres;Database=tododb;Username=postgres;Password=postgres
      - RabbitMQ__Host=rabbitmq
      - RabbitMQ__Username=guest
      - RabbitMQ__Password=guest
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    logging:
      driver: "json-file"  # logs in /var/lib/docker/containers/<container_id>/<container_id>-json.log. Find ID with: docker compose ps -q <service_name> or docker inspect <service_name>
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        mode: "non-blocking"
    deploy:
      resources:
        limits:
          memory: "256M"  # nano: "128M", micro: "256M", small: "384M"

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_DB=tododb
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    logging:
      driver: "json-file"  # logs in /var/lib/docker/containers/<container_id>/<container_id>-json.log. Find ID with: docker compose ps -q <service_name> or docker inspect <service_name>
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        mode: "non-blocking"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: "256M"  # nano: "128M", micro: "256M", small: "384M"

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    logging:
      driver: "json-file"  # logs in /var/lib/docker/containers/<container_id>/<container_id>-json.log. Find ID with: docker compose ps -q <service_name> or docker inspect <service_name>
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}/{{.ID}}"
        mode: "non-blocking"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: "256M"  # nano: "128M", micro: "256M", small: "384M"

volumes:
  postgres_data:

# AWS t3 Instance Comparison (eu-central-1):
#
# Instance   vCPU    RAM    No Upfront         All Upfront        Suitable For
#                           1yr     3yr        1yr     3yr
# t3.nano    2      0.5GB   $38     $76        $32     $63        Development/Testing
# t3.micro   2      1GB     $75     $149       $63     $126       Light Production
# t3.small   2      2GB     $150    $298       $126    $252       Production
#
# CPU Credits System:
# - You always have access to 2 vCPUs
# - CPU Credits determine how much you can use them
# - Credits accumulate when CPU usage is below baseline
# - Credits are spent when using above baseline
#
# Baseline CPU & Credits/hour:
# t3.nano:  5% guaranteed  (0.05 vCPU, earns 6 credits/hour)
# t3.micro: 10% guaranteed (0.10 vCPU, earns 12 credits/hour)
# t3.small: 20% guaranteed (0.20 vCPU, earns 24 credits/hour)
#
# Example: t3.nano
# - Always has 2 vCPUs available
# - Guaranteed 5% (0.05 vCPU) continuous use
# - When using below 5%, earns credits for bursting
# - Can burst to full 2 vCPUs when having enough credits